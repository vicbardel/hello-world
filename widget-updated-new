abc.accessibilityWidget = (function (window, document, undefined) {
    "use strict";
    
    // Constants for repeated string values
    const ACS_ACTIVE = "acs-active";
    const ACS_LARGE = "acs-large";
    const ACS_EXTRA_LARGE = "acs-extra-large";
    const REGULAR = "regular";
    const LARGE = "Large";
    const EXTRA_LARGE = "Extra Large";
    const INVISIBLE = "d-none";
    
    // DOM elements
    const html = document.querySelector("html"),
        body = document.querySelector("body"),
        colorGroup = document.getElementById("colorAdjustment"),
        acsButton = document.getElementById("acsBtn"),
        acsCheckMark = document.getElementById("acsCheck"),
        colorAdjustment = document.querySelectorAll("[data-ysi-acs-color-adjustment]"),
        textAdjustment = document.querySelector("[data-ysi-acs-text-scaling]"),
        firstModal = document.querySelector("#acsModal .modal-dialog"),
        secondModal = document.querySelector("#closeModalToggle .modal-dialog"),
        acsWidgetBtn = document.querySelector("#acsWidget"),
        resetAcs = document.querySelector("#resetAcs"),
        textAdjDesc = document.querySelector(".acs-adjustment-description"),
        acsLarge = document.querySelector("span[data-ysi-acs-indicator-large]"),
        acsExtraLarge = document.querySelector("span[data-ysi-acs-indicator-extra-large]");
    
    // Text scaling options
    const enlargeTextStyle = ["", "1.1", "1.3"],
        enlargeClasses = ["", ACS_LARGE, ACS_EXTRA_LARGE],
        textArray = ["", LARGE, EXTRA_LARGE];

    let zoomPrint = enlargeTextStyle[0],
        scalePrint = enlargeClasses[0],
        start,
        count = 0;

    // Utility functions
    const ElementUtils = {
        // Check if an element is visible
        isElementVisible(element) {
          const style = window.getComputedStyle(element);
          return style.display !== 'none' && style.visibility !== 'hidden';
        },
      
        // Check if an element is visible to screen readers
        isElementVisibleToScreenReader(element) {
          return element.getAttribute('aria-hidden') !== 'true';
        }
      };
    
    const MyUtils = {
      // DOM operations
      select(selector) {
        return document.querySelector(selector);
      },
    
      selectAll(selector) {
        return document.querySelectorAll(selector);
      },
    
      appendChild(parent, child) {
        parent.appendChild(child);
      },
    
      applyStyles(element, styles) {
        for (let prop in styles) {
          element.style[prop] = styles[prop];
        }
      },

      getStyle(element, property) {
        return window.getComputedStyle(element).getPropertyValue(property);
      },
    
      hasClass(element, className) {
        return element.classList.contains(className);
      },
    
      addClass(element, className) {
        element.classList.add(className);
      },
    
      removeClass(element, className) {
        element.classList.remove(className);
      },
    
      toggleClass(element, className) {
        element.classList.toggle(className);
      },
    
      hasCSSProperty(element, property) {
        return window.getComputedStyle(element).getPropertyValue(property) !== "";
      },
    
      // String operations
      capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      },
    
      truncate(str, length, ending = "...") {
        if (str.length <= length) {
          return str;
        }
        return str.substring(0, length - ending.length) + ending;
      },
    
      repeat(str, count) {
        return str.repeat(count);
      },
    
      reverse(str) {
        return str.split("").reverse().join("");
      },
    
      inString(str, substring) {
        return str.includes(substring);
      },
    
      trim(str) {
        return str.trim();
      },
    
      isNumber(str) {
        return !isNaN(str);
      },
    
      removeCharacters(str, charsToRemove) {
        return str.replace(new RegExp(`[${charsToRemove}]`, "g"), "");
      },
    
      replace(str, searchValue, replaceValue) {
        return str.replace(searchValue, replaceValue);
      },
    
      removeWhitespace(str) {
        return str.replace(/\s/g, "");
      }
    };
    
      // Usage example:
      /**
       * 
      const element = MyUtils.select("#myElement");
      MyUtils.addClass(element, "highlight");
      
      console.log(MyUtils.capitalize("hello")); // Output: "Hello"
      console.log(MyUtils.truncate("Lorem ipsum dolor sit amet", 10)); // Output: "Lorem ipsu..."
      console.log(MyUtils.repeat("abc", 3)); // Output: "abcabcabc"
      console.log(MyUtils.reverse("Hello")); // Output: "olleH"
      
      console.log(MyUtils.inString("Hello, World!", "World")); // Output: true
      console.log(MyUtils.trim("   Hello, World!   ")); // Output: "Hello, World!"
      console.log(MyUtils.isNumber("42")); // Output: true
      console.log(MyUtils.removeCharacters("Hello, World!", "l")); // Output: "Heo, Word!"
      console.log(MyUtils.replace("Hello, World!", "World", "Universe")); // Output: "Hello, Universe!"
      console.log(MyUtils.removeWhitespace(" Hello, World! ")); // Output: "Hello,World!"
      *
      **/

    // Set cookie
    function setCookie(name, value) {
        document.cookie = name + "=" + value + ";path=/";
    }

    // Adjust text size based on browser
    function adjustTextSize(element, objArray) {
        let browser = navigator.userAgent.match(/firefox|fxios/i) ? "firefox" : "Not Firefox";
        console.warn(browser);

        let start = calculateStart(element);
        console.warn("Count is " + count);

        let index = (start + count) % objArray.length;
        console.warn("Index is " + index);

        element.innerHTML = objArray[index];

        if (browser === "firefox") {
            scalePrint = enlargeClasses[index];
            body.setAttribute("data-ysi-textSize", scalePrint);
            setCookie("textDataSize", scalePrint);
        } else {
            zoomPrint = enlargeTextStyle[index];
            body.style.zoom = zoomPrint;
            setCookie("textSize", zoomPrint);
        }
    }

    // Calculate start based on current text size
    function calculateStart(element) {
        if (element.innerHTML === LARGE) {
            console.warn("Started from Large");
            return 2;
        } else if (element.innerHTML === EXTRA_LARGE) {
            console.warn("Started from Extra Large");
            return 3;
        } else {
            console.warn("Started from Default");
            return 1;
        }
    }

    // Accessibility Modal
    function handleAccessibilityButton(button) {
        const modal = new Modal(button);
        button.addEventListener("click", function () {
            modal.show();
            opendialog("acsOptions", "", "");
            opendialog("confirmModal", "", "");
        });
    }

    function handleClickEvent(e) {
        handleTextScaling(e);
        handleCloseWidget(e);
        handleColorChoice(e);
        handleModalClose(e);
        handleResetAcs(e);
    }

    // Handle text scaling
    function handleTextScaling(e); {
        if (e.target.closest(".acs-text-enlarge-choice")) {
            console.log("text scaling selected");
            adjustTextSize(textAdjDesc, textArray);
            let elem = e.target.closest(".acs-text-enlarge-choice");
            const cls = ACS_ACTIVE;

            if (textAdjDesc.textContent.includes(LARGE) || textAdjDesc.textContent.includes(EXTRA_LARGE)) {
                setTextSizeAttributes(elem, cls, true);
            } else {
                setTextSizeAttributes(elem, cls, false);
            }
        }
    }

    function setTooltipAndInnerText(elem, size) {
        let tooltipText = `Click button to cycle between regular, large, and extra large text sizes. Current size is ${size}.`;
        elem.setAttribute("data-original-title", tooltipText);
        elem.querySelector("#acs-size-tooltip").innerText = tooltipText;

        let buttonText = `Text size changed to ${size}.`;
        elem.querySelector("#SizeButtonPress").innerText = buttonText;
    }

    // Handle text button content
    function setTextSizeAttributes(elem, cls, isLargeOrExtra) {
        if (isLargeOrExtra) {
            elem.classList.add(cls);
            textAdjustment.setAttribute("aria-pressed", "true");

            if (textAdjDesc.textContent === "Large") {
                acsLarge.classList.add("acs-active");
                setTooltipAndInnerText(elem, "large");
            } else if (textAdjDesc.textContent === "Extra Large") {
                acsLarge.classList.remove("acs-active");
                acsExtraLarge.classList.add("acs-active");
                setTooltipAndInnerText(elem, "extra large");
            }
        } else {
            elem.classList.remove(cls);
            textAdjustment.setAttribute("aria-pressed", "false");
            acsLarge.classList.remove("acs-active");
            acsExtraLarge.classList.remove("acs-active");
            setTooltipAndInnerText(elem, "regular");
        }

        // These operations were originally part of the `colorAdjustment.forEach()` function
        logHtmlClassAndCookies();

        // The code block under `e.target.matches("#acsModal") || e.target.closest("#acsClose")`
        checkActiveButtons();
    }

    function logHtmlClassAndCookies() {
        if (html) {
            setCookie("htmlCookieclass", html.className.split(" "));
            console.log("HTML class logged");
            console.log(document.cookie);
        }
    }

    function checkActiveButtons() {
        const acsAllButtons = d.querySelectorAll(".acs-adjustment");
        const substring = "acs-active";
        let position;

        for (let i = 0; i < acsAllButtons.length; i++) {
            if (acsAllButtons[i].classList.contains(substring)) {
                position = i;
            }
        }

        const found = acsAllButtons[position];
        console.log(found);

        if (found !== undefined) {
            acsCheckMark.classList.remove(INVISIBLE);
        } else {
            acsCheckMark.classList.add(INVISIBLE);
        }
    }

    // Handle widget close
    function handleCloseWidget(e) {
        if (e.target.closest("#closeAccs")) {
            acsButton.classList.add("d-none");
            html.setAttribute("class", "");
            resetAllCookies();
            console.log("remove ACS widget");
        }
    }

    // Handle color choice
    function handleColorChoice(e) {
        if (e.target.closest(".acs-color-choice")) {
            console.log("Color logged");
            toggleActiveClass(e.target.closest(".acs-color-choice"), ACS_ACTIVE);
            applyColorAdjustments();
        }
    }
    
    function applyColorAdjustments() {
        if (colorGroup) {
            acsCheckMark.classList.add(INVISIBLE);
            html.setAttribute("class", "");
            let previousColor = localStorage.getItem('previousColor');
            acsButton.setAttribute("data-acs-applied", "");
    
            if (previousColor === 'dark' || previousColor === 'light') {
                removeContrast(previousColor);
            }
    
            colorAdjustment.forEach((colorOption) => {
                let color = colorOption.getAttribute("data-ysi-acs-color");
                if (colorOption.classList.contains(ACS_ACTIVE)) {
                    html.setAttribute("class", color);
                    acsButton.setAttribute("data-acs-applied", color);
                    colorOption.setAttribute("aria-pressed", "true");
                    if (color === 'dark' || color === 'light') {
                        applyContrast(color);
                    }
                } else {
                    colorOption.setAttribute("aria-pressed", "false");
                }
            });
        }
        //Store color contrast
        logHtmlClassAndCookies();
    }
    
    

    function applyContrast(color) {
        // Get the <html> element
        const htmlElement = document.getElementsByTagName('html')[0];
      
        // Add an ID to the <html> element if it doesn't have one
        if (!htmlElement.id) {
          htmlElement.id = 'acs-' + color + '-contrast';
        }
      
        // Add a CSS class to the <html> element
        MyUtils.addClass(htmlElement, 'acs-' + color + '-contrast');
      
        // Check if the browser is Firefox and the contrast mode is not 'dark' or 'light'
        if (
          navigator.userAgent.toLowerCase().includes('firefox') &&
          !['dark', 'light'].includes(color)
        ) {
          // Find or create a wrapper element for Firefox-specific contrast adjustments
          let wrapperElement = MyUtils.select('.acs-ff-wrapper');
          if (!wrapperElement) {
            wrapperElement = MyUtils.createElement('div', {
              class: 'acs-ff-wrapper'
            });
            MyUtils.appendChild(document.body, wrapperElement);
          }
      
          // Move certain elements to the wrapper element
          for (let element of MyUtils.selectAll('.acs-contrast')) {
            if (
              !element.closest('[data-acs], .acs-ff-wrapper')
            ) {
              MyUtils.appendChild(wrapperElement, element);
            }
          }
      
          // Add a CSS class to the wrapper element
          MyUtils.addClass(wrapperElement, 'acs-' + color + '-contrast');
        }
      
        // Check if the contrast mode is not 'desaturate', 'monochrome', 'saturation', or 'contrast'
        if (
          !['monochrome', 'high-saturation', 'low-saturation', 'invert-colors'].includes(color)
        ) {
          // Loop through all elements in the document
          for (let element of MyUtils.selectAll('*')) {
            // Array of IDs to exclude
            let excludedIds = ['acsModal', 'help-widget', 'closeModalToggle'];

            // Set the special styles for <a> tags based on the contrast mode
            const linkTextColor = color === "dark" ? "#84f191" : "#00149e";
            const linkBackgroundColor = color === "dark" ? "#101116" : "#fff";
            const linkBorderColor = color === "dark" ? "solid #84f191" : "solid #00149e";
            const linkFillColor = color === "dark" ? "#84f191" : "#00149e";

            // Skip elements that have already been processed, have a [data-acs] attribute, or are certain types of elements
            if (
                element.acsContrastFixed ||  
                element.matches('[data-acs]') ||  
                ['head', 'body', 'html', 'style', 'script', 'br', 'img'].includes(element.tagName.toLowerCase()) ||  
                excludedIds.some(id => document.querySelector("#" + id)?.contains(element)) ||  // Check if the element is a child of any excluded IDs
                excludedIds.includes(element.id)  // Check if the element's ID is in the list of excluded IDs
            ) {
                continue;
            }

            /*
             *Rewritten excluded if statement to for loop   
            */

            // Check if the element or any of its ancestors are in the excludedIds array
            let isExcluded = false;
            for (let i = 0; i < excludedIds.length; i++) {
              let excludedElement = document.querySelector("#" + excludedIds[i]);
              if (excludedElement && excludedElement.contains(element)) {
                isExcluded = true;
                break;
              }
            }
            
            // Check if the element or any of its ancestors have any of the excluded classes
            if (!isExcluded) {
              let parentElement = element;
              while (parentElement) {
                if (excludedClasses.some(className => parentElement.classList.contains(className))) {
                  isExcluded = true;
                  break;
                }
                parentElement = parentElement.parentElement;
              }
            }
            
            // The 'isExcluded' variable will be true if the element or any of its ancestors are in the excludedIds array
            // or if the element or any of its ancestors have any of the excluded classes
            if (element.acsContrastFixed || element.matches('[data-acs]') ||
                ['head', 'body', 'html', 'style', 'script', 'br', 'img'].includes(element.tagName.toLowerCase()) ||
                isExcluded) {
              continue;
            }

            // Set a flag to indicate that the element has been processed
            element.acsContrastFixed = true;
      
            // Get the original inline style of the element
            const originalStyle = element.getAttribute('style') || '';
      
            // Store the original inline style if it exists
            if (originalStyle) {
              element.setAttribute('data-acs-original-style', originalStyle);
            }
      
            // Get the current background image, background color, and text color of the element
            const backgroundImage = MyUtils.getStyle(element, 'background-image');
            const backgroundColor = MyUtils.getStyle(element, 'background-color');
            const textColor = MyUtils.getStyle(element, 'color');
      
            // Set the contrast colors based on the contrast mode
            const backgroundContrastColor = color === 'dark' ? '#181818' : '#fff';
            const textContrastColor = color === 'dark' ? '#ffffff' : '#000000';
      
            // Adjust the background image if it is not 'none'
            if (backgroundImage !== 'none') {
              if (MyUtils.inString(backgroundImage, 'linear-gradient')) {
                // Remove the background image if it contains a linear gradient
                MyUtils.applyStyles(element, {
                  'background-image': 'none'
                });
              } else {
                // Add a CSS class to indicate the presence of a background image
                MyUtils.addClass(element, 'acs-bg-image');
              }
            }
      
            // Set the aria-hidden attribute if the element is hidden
            if (!ElementUtils.isElementVisible(element)) {
              element.setAttribute('aria-hidden', 'true');
            }
      
            // Add a CSS class to indicate that the element is visible to screen readers
            if (ElementUtils.isElementVisibleToScreenReader(element)) {
              MyUtils.addClass(element, 'acs-outline-contrast');
            }
      
            // Check if the element has child nodes and a non-transparent background color
            if (
              element.childNodes.length > 0 &&
              backgroundColor !== 'rgba(0, 0, 0, 0)'
            ) {
              // Add a CSS class to indicate the presence of contrast adjustments
              MyUtils.addClass(element, 'acs-contrast');
      
              // Check if the background color or text color differs from the computed styles
              if (
                backgroundColor !== MyUtils.getStyle(element, 'background-color') ||
                textColor !== MyUtils.getStyle(element, 'color')
              ) {
                // Apply the contrast colors to the element's style attribute
                element.setAttribute(
                  'style',
                  originalStyle +
                    ';background-color:' +
                    backgroundContrastColor +
                    '!important;color:' +
                    textContrastColor +
                    '!important;'
                );
              }
            } else {
              // Check if the element is an <i> or <em> tag without child nodes and with a minimum size
              if (
                (element.tagName === 'I' || element.tagName === 'EM') &&
                element.childNodes.length < 1 &&
                element.offsetWidth >= 16 &&
                element.offsetHeight >= 16
              ) {
                // Add a CSS class to indicate the presence of contrast adjustments
                MyUtils.addClass(element, 'acs-contrast');
      
                // Check if the background color or text color differs from the computed styles
                if (
                  backgroundColor !== MyUtils.getStyle(element, 'background-color') ||
                  textColor !== MyUtils.getStyle(element, 'color')
                ) {
                  // Apply the contrast colors to the element's style attribute
                  element.setAttribute(
                    'style',
                    originalStyle +
                      ';background-color:' +
                      backgroundContrastColor +
                      '!important;color:' +
                      textContrastColor +
                      '!important;'
                  );
                }
                continue;
              }
      
              // Loop through the child nodes of the element
              for (let childNode of element.childNodes) {
                // Check if the child node is a text node and contains non-whitespace characters
                if (
                  childNode.nodeType === Node.TEXT_NODE &&
                  MyUtils.trim(childNode.nodeValue).length > 0
                ) {
                  // Add a CSS class to indicate the presence of contrast adjustments
                  MyUtils.addClass(element, 'acs-contrast');
      
                  // Check if the background color or text color differs from the computed styles
                  if (
                    backgroundColor !== MyUtils.getStyle(element, 'background-color') ||
                    textColor !== MyUtils.getStyle(element, 'color')
                  ) {
                    // Apply the contrast colors to the element's style attribute
                    element.setAttribute(
                      'style',
                      originalStyle +
                        ';background-color:' +
                        backgroundContrastColor +
                        ';color:' +
                        textContrastColor +
                        '!important;'
                    );
                  }
                  break;
                }
              }
            }
      
            // Check if the original style contains a 'color' property
            if (originalStyle && MyUtils.inString(originalStyle, 'color')) {
              let updatedStyle = '';
              for (let style of originalStyle.split(';')) {
                if (
                  style &&
                  style.toLowerCase().substring(0, 5) !== 'color'
                ) {
                  updatedStyle += ';' + style;
                }
              }
              // Remove the 'color' property from the style attribute
              element.setAttribute('style', updatedStyle);
              element.setAttribute('acs-original-style', originalStyle);
            }

            // Check if the element is an <a> tag, not a child of any excluded IDs, its ID is not in the list of excluded IDs and apply special styles

/* Traditional Code
element.tagName.toLowerCase() === "a" &&
    !excludedIds.some(function(id) {
        let excludedElement = document.querySelector("#" + id);
        return excludedElement ? excludedElement.contains(element) : false;
    }) &&
    !excludedIds.includes(element.id)
*/
            if (
                element.tagName.toLowerCase() === "a" && 
                !excludedIds.some(id => document.querySelector("#" + id)?.contains(element)) && 
                !excludedIds.includes(element.id)
            ) {
                element.style.setProperty("color", linkTextColor, "important");
                element.style.setProperty("background-color", linkBackgroundColor, "important");
                element.style.setProperty("border", linkBorderColor, "important");
                element.style.setProperty("fill", linkFillColor, "important");
            }
          }
        }
        // Store the color as previousColor in localStorage
        localStorage.setItem('previousColor', color);
        // Store the contrast mode in localStorage
        localStorage.setItem('contrastMode', color);
      }

      function removeContrast(color) {
        // Get the <html> element
        const htmlElement = document.getElementsByTagName('html')[0];
    
        // Remove the ID from the <html> element if it matches 'acs-' + color + '-contrast'
        if (htmlElement.id === 'acs-' + color + '-contrast') {
            htmlElement.id = '';
        }
    
        // Remove the CSS class from the <html> element
        MyUtils.removeClass(htmlElement, 'acs-' + color + '-contrast');
    
        // Remove the 'acs-' + color + '-contrast' class from the wrapper element
        let wrapperElement = MyUtils.select('.acs-ff-wrapper');
        if (wrapperElement) {
            MyUtils.removeClass(wrapperElement, 'acs-' + color + '-contrast');
        }
    
        // Loop through all elements in the document
        for (let element of MyUtils.selectAll('*')) {
            // Array of IDs to exclude
            let excludedIds = ['acsModal', 'help-widget', 'schedule-tour'];

            // Check if the element is an <a> tag, not a child of any excluded IDs, and its ID is not in the list of excluded IDs and remove special styles
            if (
                element.tagName.toLowerCase() === 'a' && 
                !excludedIds.some(id => document.querySelector("#" + id)?.contains(element)) && 
                !excludedIds.includes(element.id)
            ) {
                element.style.removeProperty("color");
                element.style.removeProperty("background-color");
                element.style.removeProperty("border-color");
                element.style.removeProperty("fill");
            }
            // If the element has the 'acs-contrast' class, remove it
            if (MyUtils.hasClass(element, 'acs-contrast')) {
                MyUtils.removeClass(element, 'acs-contrast');
            }
    
            // If the element has the 'acs-bg-image' class, remove it
            if (MyUtils.hasClass(element, 'acs-bg-image')) {
                MyUtils.removeClass(element, 'acs-bg-image');
            }
    
            // If the element has the 'acs-outline-contrast' class, remove it
            if (MyUtils.hasClass(element, 'acs-outline-contrast')) {
                MyUtils.removeClass(element, 'acs-outline-contrast');
            }
    
            // If the element has the 'data-acs-original-style' attribute, restore its original style
            if (element.hasAttribute('data-acs-original-style')) {
                element.setAttribute('style', element.getAttribute('data-acs-original-style'));
                element.removeAttribute('data-acs-original-style');
            }
    
            // Remove the 'acsContrastFixed' property if it exists
            if (element.acsContrastFixed) {
                delete element.acsContrastFixed;
            }
    
            // Remove the 'aria-hidden' attribute if it exists
            if (element.hasAttribute('aria-hidden')) {
                element.removeAttribute('aria-hidden');
            }
        }
        // Store the color as previousColor in localStorage
        localStorage.removeItem('previousColor');
        // Remove the contrast mode from localStorage
        localStorage.removeItem('contrastMode');
    }
    

    /**
     * Toggles the given class for the given element. 
     * If the class is already present, it removes it; otherwise, it adds the class and removes it from all sibling elements.
     *
     * @param {HTMLElement} element - The element to toggle the class on.
     * @param {string} className - The class to toggle.
     */
    function toggleActiveClass(element, className) {
        // If the class is already present, remove it
        if (element.classList.contains(className)) {
            element.classList.remove(className);
        } else {
            // Otherwise, add the class and remove it from all sibling elements
            let siblings = Array.from(element.parentNode.children);
            siblings.forEach(sibling => sibling.classList.remove(className));
            element.classList.add(className);
        }
    }

    // Handle modal close
    function handleModalClose(e) {
        if (e.target.matches("#acsModal") || e.target.closest("#acsClose")) {
            checkForActiveAdjustments();
        }
    }

    // Reset widget
    function resetAllCookies(refreshPage, classModification, dismissValue) {
        if (classModification !== undefined) {
            acsButton.classList.add(classModification);
        }
    
        html.setAttribute("class", "");
        setCookie("acsDismiss", dismissValue);
        setCookie("htmlCookieclass", "");
        setCookie("textSize", "");
        setCookie("textDataSize", "");
    
        if (refreshPage) {
            window.location.href = window.location.href.split("#")[0];
        }
    
        console.log(dismissValue === "d-none" ? "Remove ACS widget" : "Reset Cookies");
    }

    function handleResetAcs(e) {
        if (e.target.closest("#resetAcs")) {
            resetAllCookies(true);
        } else if (e.target.closest("#closeAccs")) {
            resetAllCookies(true, " d-none", "d-none");
        }
    }

    // Initialization
    function init() {
        if (acsWidgetBtn) {
            let alignment = acsWidgetBtn.classList.contains("widget-left") ? " modal-left" : " modal-right";
            firstModal.classList.add(alignment);
            secondModal.classList.add(alignment);
            resetAcs.addEventListener("click", function () {
                html.setAttribute("class", "");
                resetAllCookies();
                window.location.href = window.location.href.split("#")[0];
                console.log("Reset Cookies");
            });
        }

        // Check for saved contrast mode on page load
        window.addEventListener("load", function() {
            let contrastMode = localStorage.getItem('contrastMode');
            
            // If a contrast mode is stored in localStorage, apply it
            if (contrastMode) {
                applyContrast(contrastMode);
            }
        });
    }

    // Set up event listeners
    if (document.querySelector("#blogcontent")) {
        document.querySelectorAll(".accessibility-button").forEach(handleAccessibilityButton);
    }
    document.addEventListener("click", handleClickEvent);

    return {
        init
    };

    
})(window, document);

abc.registerCallback(function () {
    abc.accessibilityWidget.init();
});
